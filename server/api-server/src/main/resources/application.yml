##服务器端口
server:
  port: 3334
  tomcat:
    port-header: PUT,DELETE,OPTIONS,GET,POST

##微服务名
spring:
#  devtools:
#    restart:
#      exclude: static/**,public/**,com
#  resources:
#    static-locations: classpath:/templates/
  jackson:
    serialization:
      failOnEmptyBeans: false
  application:
    name: user-api
  zipkin:
    base-url: http://localhost:8080
  sleuth:
    sampler:
      percentage: 1
  datasource:
    url: jdbc:mysql://192.168.56.1:3306/spring?useUnicode=true&characterEncoding=utf-8
#    type: com.alibaba.druid.pool.DruidDataSource
    username: root
    password: root
    removeAbandoned: false
    removeAbandonedTimeout: 1000
    logAbandoned: false
    driverClassName: com.mysql.jdbc.Driver
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 50
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: true
  #JPA Configuration:
  jpa:
    database: MYSQL
    show-sql: true
    generate-ddl: true
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        strategy: org.hibernate.cfg.ImprovedNamingStrategy
      ddl-auto: update
    database-platform: org.hibernate.dialect.MySQLDialect
    open-in-view: true
  output:
    ansi:
      enabled: detect
  redis:
    #    cluster: 集群
    #      nodes:
    #        - 192.168.0.17:6390
    #        - 192.168.0.17:6391
    #        - 192.168.0.17:6392
    #        - 192.168.0.9:6390
    #        - 192.168.0.9:6391
    #        - 192.168.0.9:6392
      ##Redis服务器地址---如果没有配置 默认 127.0.0.1:6379 无密码
    host: redis
    ## Redis服务器连接端口
    port: 6379
    ## Redis服务器连接密码（默认为空）
    password: 111111
    pool:
      ## 连接池最大连接数（使用负值表示没有限制）
      max-active: 8
      ## 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      ## 连接池中的最大空闲连接
      max-idle: 8
      ## 连接池中的最小空闲连接
      min-idle: 1
    ## 连接超时时间（毫秒）
    timeout: 0

  ##必要，RedisCacheManager 存储索引
  ##spring.cache.cache-names=users
  ##自定义RedisCacheManger配置
  ## 名称 -- 缓存有效期：s -------不同缓存分类后制定不同的有效期
zsw:
  base:
    redis:
      configuration:
        expires:
          list: 1800
          proxy: 900
          users: 1800
          customers: 1800
##服务发现地址
eureka:
  client:
    serviceUrl:
      defaultZone:  http://${eureka.instance.hostname}:${eureka.client.eureka-server-port}/eureka/
    eureka-server-port: 1111
  instance:
    hostname: eureka

logging:
  level: debug
##jdbc
